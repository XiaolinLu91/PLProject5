Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> argument
Rule 2     argument -> BIT
Rule 3     argument -> ( argument )
Rule 4     argument -> NOT argument
Rule 5     argument -> argument AND argument
Rule 6     argument -> argument OR argument
Rule 7     argument -> argument XOR argument
Rule 8     argument -> argument NAND argument
Rule 9     argument -> argument NOR argument

Terminals, with rules where they appear

(                    : 3
)                    : 3
AND                  : 5
BIT                  : 2
NAND                 : 8
NOR                  : 9
NOT                  : 4
OR                   : 6
XOR                  : 7
error                : 

Nonterminals, with rules where they appear

argument             : 1 3 4 5 5 6 6 7 7 8 8 9 9
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . argument
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 2
    statement                      shift and go to state 3

state 1

    (3) argument -> ( . argument )
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 6

state 2

    (1) statement -> argument .
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

    $end            reduce using rule 1 (statement -> argument .)
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11


state 3

    (0) S' -> statement .



state 4

    (4) argument -> NOT . argument
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 12

state 5

    (2) argument -> BIT .

    AND             reduce using rule 2 (argument -> BIT .)
    OR              reduce using rule 2 (argument -> BIT .)
    XOR             reduce using rule 2 (argument -> BIT .)
    NAND            reduce using rule 2 (argument -> BIT .)
    NOR             reduce using rule 2 (argument -> BIT .)
    $end            reduce using rule 2 (argument -> BIT .)
    )               reduce using rule 2 (argument -> BIT .)


state 6

    (3) argument -> ( argument . )
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

    )               shift and go to state 13
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11


state 7

    (5) argument -> argument AND . argument
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 14

state 8

    (7) argument -> argument XOR . argument
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 15

state 9

    (8) argument -> argument NAND . argument
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 16

state 10

    (6) argument -> argument OR . argument
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 17

state 11

    (9) argument -> argument NOR . argument
    (2) argument -> . BIT
    (3) argument -> . ( argument )
    (4) argument -> . NOT argument
    (5) argument -> . argument AND argument
    (6) argument -> . argument OR argument
    (7) argument -> . argument XOR argument
    (8) argument -> . argument NAND argument
    (9) argument -> . argument NOR argument

    BIT             shift and go to state 5
    (               shift and go to state 1
    NOT             shift and go to state 4

    argument                       shift and go to state 18

state 12

    (4) argument -> NOT argument .
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
    $end            reduce using rule 4 (argument -> NOT argument .)
    )               reduce using rule 4 (argument -> NOT argument .)
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11

  ! AND             [ reduce using rule 4 (argument -> NOT argument .) ]
  ! OR              [ reduce using rule 4 (argument -> NOT argument .) ]
  ! XOR             [ reduce using rule 4 (argument -> NOT argument .) ]
  ! NAND            [ reduce using rule 4 (argument -> NOT argument .) ]
  ! NOR             [ reduce using rule 4 (argument -> NOT argument .) ]


state 13

    (3) argument -> ( argument ) .

    AND             reduce using rule 3 (argument -> ( argument ) .)
    OR              reduce using rule 3 (argument -> ( argument ) .)
    XOR             reduce using rule 3 (argument -> ( argument ) .)
    NAND            reduce using rule 3 (argument -> ( argument ) .)
    NOR             reduce using rule 3 (argument -> ( argument ) .)
    $end            reduce using rule 3 (argument -> ( argument ) .)
    )               reduce using rule 3 (argument -> ( argument ) .)


state 14

    (5) argument -> argument AND argument .
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
    $end            reduce using rule 5 (argument -> argument AND argument .)
    )               reduce using rule 5 (argument -> argument AND argument .)
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11

  ! AND             [ reduce using rule 5 (argument -> argument AND argument .) ]
  ! OR              [ reduce using rule 5 (argument -> argument AND argument .) ]
  ! XOR             [ reduce using rule 5 (argument -> argument AND argument .) ]
  ! NAND            [ reduce using rule 5 (argument -> argument AND argument .) ]
  ! NOR             [ reduce using rule 5 (argument -> argument AND argument .) ]


state 15

    (7) argument -> argument XOR argument .
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
    $end            reduce using rule 7 (argument -> argument XOR argument .)
    )               reduce using rule 7 (argument -> argument XOR argument .)
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11

  ! AND             [ reduce using rule 7 (argument -> argument XOR argument .) ]
  ! OR              [ reduce using rule 7 (argument -> argument XOR argument .) ]
  ! XOR             [ reduce using rule 7 (argument -> argument XOR argument .) ]
  ! NAND            [ reduce using rule 7 (argument -> argument XOR argument .) ]
  ! NOR             [ reduce using rule 7 (argument -> argument XOR argument .) ]


state 16

    (8) argument -> argument NAND argument .
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
    $end            reduce using rule 8 (argument -> argument NAND argument .)
    )               reduce using rule 8 (argument -> argument NAND argument .)
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11

  ! AND             [ reduce using rule 8 (argument -> argument NAND argument .) ]
  ! OR              [ reduce using rule 8 (argument -> argument NAND argument .) ]
  ! XOR             [ reduce using rule 8 (argument -> argument NAND argument .) ]
  ! NAND            [ reduce using rule 8 (argument -> argument NAND argument .) ]
  ! NOR             [ reduce using rule 8 (argument -> argument NAND argument .) ]


state 17

    (6) argument -> argument OR argument .
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
    $end            reduce using rule 6 (argument -> argument OR argument .)
    )               reduce using rule 6 (argument -> argument OR argument .)
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11

  ! AND             [ reduce using rule 6 (argument -> argument OR argument .) ]
  ! OR              [ reduce using rule 6 (argument -> argument OR argument .) ]
  ! XOR             [ reduce using rule 6 (argument -> argument OR argument .) ]
  ! NAND            [ reduce using rule 6 (argument -> argument OR argument .) ]
  ! NOR             [ reduce using rule 6 (argument -> argument OR argument .) ]


state 18

    (9) argument -> argument NOR argument .
    (5) argument -> argument . AND argument
    (6) argument -> argument . OR argument
    (7) argument -> argument . XOR argument
    (8) argument -> argument . NAND argument
    (9) argument -> argument . NOR argument

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
    $end            reduce using rule 9 (argument -> argument NOR argument .)
    )               reduce using rule 9 (argument -> argument NOR argument .)
    AND             shift and go to state 7
    OR              shift and go to state 10
    XOR             shift and go to state 8
    NAND            shift and go to state 9
    NOR             shift and go to state 11

  ! AND             [ reduce using rule 9 (argument -> argument NOR argument .) ]
  ! OR              [ reduce using rule 9 (argument -> argument NOR argument .) ]
  ! XOR             [ reduce using rule 9 (argument -> argument NOR argument .) ]
  ! NAND            [ reduce using rule 9 (argument -> argument NOR argument .) ]
  ! NOR             [ reduce using rule 9 (argument -> argument NOR argument .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 12 resolved as shift
WARNING: shift/reduce conflict for OR in state 12 resolved as shift
WARNING: shift/reduce conflict for XOR in state 12 resolved as shift
WARNING: shift/reduce conflict for NAND in state 12 resolved as shift
WARNING: shift/reduce conflict for NOR in state 12 resolved as shift
WARNING: shift/reduce conflict for AND in state 14 resolved as shift
WARNING: shift/reduce conflict for OR in state 14 resolved as shift
WARNING: shift/reduce conflict for XOR in state 14 resolved as shift
WARNING: shift/reduce conflict for NAND in state 14 resolved as shift
WARNING: shift/reduce conflict for NOR in state 14 resolved as shift
WARNING: shift/reduce conflict for AND in state 15 resolved as shift
WARNING: shift/reduce conflict for OR in state 15 resolved as shift
WARNING: shift/reduce conflict for XOR in state 15 resolved as shift
WARNING: shift/reduce conflict for NAND in state 15 resolved as shift
WARNING: shift/reduce conflict for NOR in state 15 resolved as shift
WARNING: shift/reduce conflict for AND in state 16 resolved as shift
WARNING: shift/reduce conflict for OR in state 16 resolved as shift
WARNING: shift/reduce conflict for XOR in state 16 resolved as shift
WARNING: shift/reduce conflict for NAND in state 16 resolved as shift
WARNING: shift/reduce conflict for NOR in state 16 resolved as shift
WARNING: shift/reduce conflict for AND in state 17 resolved as shift
WARNING: shift/reduce conflict for OR in state 17 resolved as shift
WARNING: shift/reduce conflict for XOR in state 17 resolved as shift
WARNING: shift/reduce conflict for NAND in state 17 resolved as shift
WARNING: shift/reduce conflict for NOR in state 17 resolved as shift
WARNING: shift/reduce conflict for AND in state 18 resolved as shift
WARNING: shift/reduce conflict for OR in state 18 resolved as shift
WARNING: shift/reduce conflict for XOR in state 18 resolved as shift
WARNING: shift/reduce conflict for NAND in state 18 resolved as shift
WARNING: shift/reduce conflict for NOR in state 18 resolved as shift
